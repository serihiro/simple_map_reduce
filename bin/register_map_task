#!/usr/bin/env ruby

require 'bundler/setup'
require 'simple_map_reduce'

map_script = <<-EOS
  class WordCount
    def map(input_data, output_io)
      input_data.split(' ').each do |raw_word|
        word = raw_word.strip
        next if word.empty?

        output_io.puts({ key: word, value: 1 }.to_json)
      end
    end
  end
EOS
map_class_name = 'WordCount'
reduce_script = "class Fuga\n  def reduce;end\n end"
reduce_class_name = 'Fuga'
job_input_directory_path = 'input.txt'
job_input_bucket_name = 'input'
job_output_directory_path = 'output.txt'
job_output_bucket_name = 'output'
map_worker = SimpleMapReduce::Server::Worker.new(url: 'http://localhost:4568')

job = ::SimpleMapReduce::Server::Job.new(
        map_script: map_script,
        map_class_name: map_class_name,
        reduce_script: reduce_script,
        reduce_class_name: reduce_class_name,
        job_input_directory_path: job_input_directory_path,
        job_input_bucket_name: job_input_bucket_name,
        job_output_directory_path: job_output_directory_path,
        job_output_bucket_name: job_output_bucket_name,
        map_worker: map_worker
      )
puts job.state
puts job.start!

url = 'http://localhost:4568'
http_client = ::Faraday.new(
                url: url,
                headers: {
                            'Accept' => 'application/x-msgpack ',
                            'Content-Type' => 'application/x-msgpack '
                          }
              ) do |faraday|
                faraday.response :logger
                faraday.adapter  ::Faraday.default_adapter
              end

response = http_client.post do |request|
             request.url('/map_tasks')
             request.body = job.serialize
           end
puts response.inspect
